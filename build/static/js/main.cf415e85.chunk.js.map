{"version":3,"sources":["components/Note.js","components/services.js","components/Login.js","app.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","data","then","response","concat","newObject","post","put","login","credentials","a","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","setUser","useEffect","services","console","log","length","handleLogin","event","preventDefault","loginService","user","setTimeout","notesToShow","filter","Notification","message","Footer","style","color","fontStyle","fontSize","onSubmit","type","value","name","onChange","target","map","key","find","n","changedNote","catch","error","toggleImportanceOf","noteObject","date","Date","toISOString","Math","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf415e85.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n    const label = note.important ? 'make not important' : 'make important'\n    return(\n        <li className='notes'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n        id: 1000,\n        content: 'This note is not saved to the server',\n        data: '2019-05-30T17:30:31.098Z',\n        important: true,\n    }\n    return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default{ getAll, create, update }","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n    const response = await axios.post(baseUrl, credentials)\n    return response.data\n}\n\nexport default { login }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport services from './components/services'\nimport loginService from './components/Login'\n\nconst App = (props) => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('a new note...')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [user, setUser] = useState(null)\n\n    useEffect(() => {\n        services\n            .getAll()\n            .then(response => setNotes(response)) \n    }, [])\n\n    console.log('render', notes.length, 'notes')\n\n    const toggleImportanceOf = (id) => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important}\n\n        services.update(id, changedNote).then(response => {\n            setNotes(notes.map(note => note.id !== id ? note : response))\n        }).catch(error => {\n            setErrorMessage(\n                `Note '${note.content}' was already removed from server`\n            )\n            setTimeout(()=> {\n                setErrorMessage(null)\n            }, 5000)\n        })\n    }\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            id:notes.length +1,\n        }\n        \n        services.create(noteObject).then(response => {\n            setNotes(notes.concat(response))\n            setNewNote('') \n        })\n    }\n    \n    const handleNoteChange = (event) =>{\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const handleLogin = async (event) => {\n        event.preventDefault()\n        try {\n            const user = await loginService.login({\n                username, password\n            })\n            setUser(user)\n            setUsername('')\n            setPassword('')\n        }\n        catch(exception){\n            setErrorMessage(('Wrong credentials'))\n            setTimeout(()=> {\n                setErrorMessage(null)\n            }, 5000)\n        }\n\n    }\n\n    const notesToShow = showAll ? notes \n        : notes.filter(note => note.important)\n\n    const Notification = ({message}) => {\n        if(message === null){\n            return null\n        }\n        return(\n            <div className=\"error\">\n                {message}\n            </div>\n        )\n    }\n\n    const Footer = () => {\n        const footerStyle = {\n            color: 'green',\n            fontStyle: 'italic',\n            fontSize: 16\n        }\n\n        return(\n            <div style={footerStyle}>\n                <br/>\n                <em>Note application</em>\n            </div>\n        )\n    }\n\n    return(\n        <div>\n            <h1>Notes</h1>\n            <Notification message ={errorMessage}/>\n\n            <form onSubmit={handleLogin}>\n                <div>\n                    Username\n                        <input\n                        type = \"text\"\n                        value = {username}\n                        name = \"Username\"\n                        onChange={ ({target}) => setUsername(target.value)}\n                        />\n                </div>\n                <div>\n                    Password\n                        <input\n                        type = \"password\"\n                        value = {password}\n                        name = \"Password\"\n                        onChange= { ({target}) => setPassword(target.value)}\n                        />\n                </div>\n                <button type=\"submit\">Login</button>\n            </form>\n\n            <button onClick={() => setShowAll(!showAll)}>\n                show {showAll ? 'important' : 'all'}\n            </button>\n            <ul>\n                {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={()=> toggleImportanceOf(note.id)}/>)}\n            </ul>\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange}/>\n                <button type=\"submit\">Save</button>\n            </form>\n            \n            <Footer/>\n            \n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport './index.css'\n\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}