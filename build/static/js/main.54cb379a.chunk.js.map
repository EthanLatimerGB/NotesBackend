{"version":3,"sources":["components/Note.js","components/services.js","app.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","request","axios","get","nonExisting","id","data","then","response","concat","newObject","post","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","services","console","log","length","notesToShow","filter","Notification","message","Footer","style","color","fontStyle","fontSize","map","key","find","n","changedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAYeA,EAVF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACXC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACI,wBAAIC,UAAU,SACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCiBlC,EArBC,WACX,IAAMK,EAAUC,IAAMC,IAHV,cAINC,EAAc,CAChBC,GAAI,IACJN,QAAS,uCACTO,KAAM,2BACNT,WAAW,GAEf,OAAOI,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASF,KAAKG,OAAOL,OAa3C,EAVC,SAAAM,GAEX,OADgBR,IAAMS,KAdV,aAcwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASF,SAQ/B,EALC,SAACD,EAAIK,GAEhB,OADgBR,IAAMU,IAAN,UAnBJ,aAmBI,YAAwBP,GAAMK,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASF,SCiF9BO,EAlGH,SAACC,GAAW,IAAD,EACOC,mBAAS,IADhB,mBACZC,EADY,KACLC,EADK,OAEWF,mBAAS,iBAFpB,mBAEZG,EAFY,KAEHC,EAFG,OAGWJ,oBAAS,GAHpB,mBAGZK,EAHY,KAGHC,EAHG,OAIqBN,mBAAS,MAJ9B,mBAIZO,EAJY,KAIEC,EAJF,KAMnBC,qBAAU,WACPC,IAAkBlB,MAAK,SAAAC,GAAQ,OAAIS,EAAST,QAC5C,IAEHkB,QAAQC,IAAI,SAAUX,EAAMY,OAAQ,SAEpC,IAoCMC,EAAcT,EAAUJ,EACxBA,EAAMc,QAAO,SAAApC,GAAI,OAAIA,EAAKG,aAE1BkC,EAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAe,OAAZA,EACQ,KAGP,yBAAKlC,UAAU,SACVkC,IAKPC,EAAS,WAOX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,kDAKZ,OACI,6BACI,qCACA,kBAACN,EAAD,CAAcC,QAAUV,IACxB,4BAAQtB,QAAS,kBAAMqB,GAAYD,KAAnC,QACUA,EAAU,YAAc,OAElC,4BACKS,EAAYS,KAAI,SAAA5C,GAAI,OAAI,kBAAC,EAAD,CAAM6C,IAAK7C,EAAKW,GAAIX,KAAMA,EAAMC,iBAAkB,kBAzE5D,SAACU,GACxB,IAAMX,EAAOsB,EAAMwB,MAAK,SAAAC,GAAC,OAAIA,EAAEpC,KAAOA,KAChCqC,EAAW,eAAQhD,EAAR,CAAcG,WAAYH,EAAKG,YAEhD4B,EAAgBpB,EAAIqC,GAAanC,MAAK,SAAAC,GAClCS,EAASD,EAAMsB,KAAI,SAAA5C,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAOc,SACpDmC,OAAM,SAAAC,GACLrB,EAAgB,SAAD,OACF7B,EAAKK,QADH,sCAGf8C,YAAW,WACPtB,EAAgB,QACjB,QA6DiFuB,CAAmBpD,EAAKW,WAE5G,0BAAM0C,SA3DE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfnD,QAASmB,EACTiC,MAAM,IAAIC,MAAOC,cACjBxD,UAAWyD,KAAKC,SAAW,GAC3BlD,GAAGW,EAAMY,OAAQ,GAGrBH,EAAgByB,GAAY3C,MAAK,SAAAC,GAC7BS,EAASD,EAAMP,OAAOD,IACtBW,EAAW,SAiDP,2BAAOqC,MAAOtC,EAASuC,SA7CV,SAACT,GACtBtB,QAAQC,IAAIqB,EAAMU,OAAOF,OACzBrC,EAAW6B,EAAMU,OAAOF,UA4ChB,4BAAQG,KAAK,UAAb,SAGJ,kBAAC1B,EAAD,Q,MCxFZ2B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.54cb379a.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n    const label = note.important ? 'make not important' : 'make important'\n    return(\n        <li className='notes'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n        id: 1000,\n        content: 'This note is not saved to the server',\n        data: '2019-05-30T17:30:31.098Z',\n        important: true,\n    }\n    return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default{ getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport services from './components/services'\n\nconst App = (props) => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('a new note...')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n       services.getAll().then(response => setNotes(response)) \n    }, [])\n\n    console.log('render', notes.length, 'notes')\n\n    const toggleImportanceOf = (id) => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important}\n\n        services.update(id, changedNote).then(response => {\n            setNotes(notes.map(note => note.id !== id ? note : response))\n        }).catch(error => {\n            setErrorMessage(\n                `Note '${note.content}' was already removed from server`\n            )\n            setTimeout(()=> {\n                setErrorMessage(null)\n            }, 5000)\n        })\n    }\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            id:notes.length +1,\n        }\n        \n        services.create(noteObject).then(response => {\n            setNotes(notes.concat(response))\n            setNewNote('') \n        })\n    }\n    \n    const handleNoteChange = (event) =>{\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll ? notes \n        : notes.filter(note => note.important)\n\n    const Notification = ({message}) => {\n        if(message === null){\n            return null\n        }\n        return(\n            <div className=\"error\">\n                {message}\n            </div>\n        )\n    }\n\n    const Footer = () => {\n        const footerStyle = {\n            color: 'green',\n            fontStyle: 'italic',\n            fontSize: 16\n        }\n\n        return(\n            <div style={footerStyle}>\n                <br/>\n                <em>Note application</em>\n            </div>\n        )\n    }\n\n    return(\n        <div>\n            <h1>Notes</h1>\n            <Notification message ={errorMessage}/>\n            <button onClick={() => setShowAll(!showAll)}>\n                show {showAll ? 'important' : 'all'}\n            </button>\n            <ul>\n                {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={()=> toggleImportanceOf(note.id)}/>)}\n            </ul>\n            <form onSubmit={addNote}>\n                <input value={newNote} onChange={handleNoteChange}/>\n                <button type=\"submit\">Save</button>\n            </form>\n            \n            <Footer/>\n            \n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport './index.css'\n\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}